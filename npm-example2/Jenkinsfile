def rtServer, buildInfo, rtNpm

pipeline {
    agent { label 'master' }
    tools {
      nodejs 'NJS11'
    }
    parameters {
        string (name: 'ART_URL', defaultValue: 'http://localhost:8081/artifactory', description: 'Artifactory where artifacts will be deployed/resolved')
        string (name: 'ART_USER', defaultValue: 'admin', description: 'Artifactory user for deploy/resolve artifacts')
        string (name: 'ART_PASSWORD', defaultValue: 'password', description: 'Artifactory password for deploy/resolve artifacts')
        string (name: 'ART_REPO', defaultValue: 'npm', description: 'Virtual Repository where artifacts will be deployed/resolved')
        booleanParam (name: 'XRAY_SCAN', defaultValue: false, description: 'Scan artifacts using Xray')
        booleanParam (name: 'FAIL_BUILD', defaultValue: false, description: 'Fail build if any violation is found in Xray')
    }
    
    stages {
        stage('Init properties'){
            steps {
                script {
                    rtServer = Artifactory.newServer url: "${params.ART_URL}", username: "${params.ART_USER}", password: "${params.ART_PASSWORD}"
                    rtNpm = Artifactory.newNpmBuild()
                    buildInfo = Artifactory.newBuildInfo()
                    // This variables should be PARAMETERIZED
                    rtNpm.deployer repo: "${ART_REPO}", server: rtServer
                    rtNpm.resolver repo: "${ART_REPO}", server: rtServer
                    rtNpm.deployer.deployArtifacts = false
                    rtNpm.executablePath = (String) "$NODEJS_HOME/bin/npm"
                }
            }
        }
        
        stage ('Npm Clean Cache') {
            steps {
                script{
                    sh "npm cache clean --force"
                }
            }
        }
        
        stage ('Npm Install') {
            steps {
                script{
                    rtNpm.install buildInfo: buildInfo
                }
            }
        }
    
        stage ('Publish npm') {
            steps {
                script {
                    rtNpm.publish buildInfo: buildInfo
                }
            }
        }
    
        stage ('Publish build info') {
            steps {
                script {
                    rtServer.publishBuildInfo buildInfo
                }
            }
        }
        
        stage('Xray Scan'){
            when {
                expression { return params.XRAY_SCAN }
            }
            steps {
                script {
                    xrayConfig = [
                        'buildName'     : buildInfo.name,
                        'buildNumber'    : buildInfo.number,
                        'failBuild'     : "${params.FAIL_BUILD}".toBoolean()
                    ]
                    xrayResults = rtServer.xrayScan xrayConfig
                    echo xrayResults as String
                }
            }
        }
    }
}